Object subclass: #Counter	instanceVariableNames: 'count'	classVariableNames: ''	poolDictionaries: ''	category: 'MyCounter'!!Counter commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	count:		<Object>    Implementation Points!!Counter methodsFor: 'accessing' stamp: 'PritamSangani 10/9/2018 12:26'!count:x	count := x! !!Counter methodsFor: 'accessing' stamp: 'PritamSangani 10/9/2018 12:16'!count	"return the current value of the count instance variable"		^ count! !!Counter methodsFor: 'operation' stamp: 'PritamSangani 10/9/2018 12:27'!decrement	self count: self count - 1! !!Counter methodsFor: 'operation' stamp: 'PritamSangani 10/9/2018 12:27'!increment	self count: self count + 1! !!Counter methodsFor: 'initialization' stamp: 'PritamSangani 10/9/2018 12:14'!initialize	"set the initial value of the count variable to 0"	count := 0! !