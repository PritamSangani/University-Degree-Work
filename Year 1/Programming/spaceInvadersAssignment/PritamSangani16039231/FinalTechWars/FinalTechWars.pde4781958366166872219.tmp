/* --- Run Class where all the main code will run --- */

/*--Variable Declarations--*/

/* -- start screen -- */
GUIScreen StartScreen;

/* -- Defender -- */
Defender android;

/* -- Bullets -- */
ArrayList<DefenderBullet> defenderBulletsList = new ArrayList<DefenderBullet>();
ArrayList<AlienBullet> alienBulletsList = new ArrayList<AlienBullet>();
boolean spacePressed;


boolean aPressed;
/* -- Aliens -- */
int columns = 9;
int rows = 4;
Alien [][] alienFleet;
boolean alienDown = false;

/* -- Variables for the Game -- */
enum gameMode {START, INGAME, FINISH};
gameMode currentMode;
String myText = "Enter your Name";
int levelNo, alienCounter;

void setup()
{
  levelNo = 1;
  //set the gameMode equal to START when game first runs -- SplashScreen
  currentMode = gameMode.START;
  //create an instance of a new GUIScreen object
  StartScreen = new GUIScreen();
  //set the size of the canvas as defined in the setScreenSize method within the GUIScreen class
  StartScreen.setScreenSize();
  //create an instance of a new Defender object
  android = new Defender();
  //create an array of Alien objects
  alienFleet = new Alien [columns][rows];
  //initialise the array of Aliens as defined in the initialiseArray method within this class
  initialiseArray();
}

void draw()
{
  //if the gameMode is set at START
  if (currentMode == gameMode.START)
  {
    //display the Splash Screen as defined in the displayStartScreen method within the GUIScreen class
    StartScreen.displayStartScreen(); 
  }
  //else if the gameMode is set as INGAME
  else if (currentMode == gameMode.INGAME)
  {
    println("c: " + alienCounter);
    println("l: " + levelNo);
    //set the background colour to being at r, g, b value of (225, 225, 225)
    background(225);
    text("Score: " + android.getScore(), 20, 30);
    //render the defender as defined in the render method within the Defender class
    android.render();
    //render the array of Aliens as defined in the renderAlienArray method within this class
    renderAlienArray();
    //if the boolean variable called xDown is equal to true
    if (alienDown == true)
    {
      //move the array of Aliens down as defined in the moveArrayDown method within this class
      moveArrayDown();
    }
    //if the boolean variable spacePressed is equal to true
    if (spacePressed == true)
    {
      //for all Bullet objects in the bulletsList arrayList
      for (DefenderBullet counter : defenderBulletsList)
      {
        //render the bullet as defined in render method within the Bullet class
        counter.render();
      }
    }
    ///////////////////////////////////////
    
    ///////////////////////////////////////
    /* 
     call the method to remove bullets from the ArrayList if they go off screen or they hit an alien
     - this method is defined in the removeBullets method within this class
    */
    removeDefenderBullets();
    //if the number of lives left equals 0 
    if(android.getLives() == 0)
    {
      //switch gameMode to FINISH
      currentMode = gameMode.FINISH;
    }
    ///////////////
    addAlienBullets();
    shootAlienBullets();
    removeAlienBullets();
    
    if(alienCounter == 0)
    {
      levelNo++;
      delay(500);
      initialiseArray();
    }
  }
  
  //else if the gameMode is set as FINISH
  else if (currentMode == gameMode.FINISH)
  {
    //set the background colour to r, g, b value of (125, 125, 125)
    background(125);
    //align text in the centre of the screen
    textAlign(CENTER, CENTER);
    //make text size equal to 30px
    textSize(30);
    //make the font colour black
    fill(0);
    //write the string variable myText to screen at x values (0, width) and y values (0, height)
    text(myText, 0, 0, width, height);
  }
}

/* -------- Defined Methods -------- */

//method to initalise the array of Aliens 
void initialiseArray()
{
  alienCounter = columns * rows;
  //for an integer, i = 0, i is less than the length of the array, where i is incremented by 1 each time the for loop runs
  for (int i = 0; i < alienFleet.length; i++)
  {
    //for an integer, j = 0, j is less than the rows of the array, where j is incremented by 1 each time the for loop runs
    for (int j = 0; j < alienFleet[0].length; j++)
    {
      //create an instance of an Alien object at the index of the i and j value at which the object was initialised
      alienFleet[i][j] = new Alien(i, j);
    }
  }
}

//method to render the array of Aliens
void renderAlienArray()
{
  //for an integer, i = 0, i is less than the length of the array, where i is incremented by 1 each time the for loop runs
  for (int i = 0; i < alienFleet.length; i++)
  {
    //for an integer, j = 0, j is less than the rows of the array, where j is incremented by 1 each time the for loop runs
    for (int j = 0; j < alienFleet[0].length; j++)
    {
      for (DefenderBullet counter : defenderBulletsList)
      {
        //if the alien at the i and j value index is not null
        if (alienFleet[i][j] != null)
        {
          if (alienFleet[i][j].isHit(counter.getBulletX(), counter.getBulletY()))
          {
            //make the alien at the i and j index equal to null (i.e. remove the alien that has been shot)
            alienFleet[i][j] = null;
            //call the method to set the getRidBoolean variable in the Alien class to true
            counter.setGetRidBoolean(true);
            //call the method to increase the score as defined in the increaseScore method within the Defender class
            android.increaseScore(); 
            //use the setter method for setting the lives variable so the number of lives decreases by 1
            //android.setLives(android.getLives()-1);
            
            //////////////////
            alienCounter--;
          }
        }
      }
      //if the alien at the i and j value index is not null
      if (alienFleet[i][j] != null)
      {
        //render the Alien object at each index of the i and j value as defined in the render method within the Alien class
        alienFleet[i][j].render();
        //if the checkEdge method as defined within the Alien class has been called
        if (alienFleet[i][j].checkEdge())
        {
          //make the boolean variable called alienDown equal to true
          alienDown = true; 
        }
        //if the y-value of the array of Aliens reaches the y value of the height of the canvas - 200
        if (alienFleet[i][j].getAlienY() >= (height - 200))
        {
          //set the gameMode equal to FINISH
          currentMode = gameMode.FINISH;
        }
      }
    }
  }
}

//method called when aliens hit either side of the canvas to move the array of aliens down
void moveArrayDown()
{
  //reset the variable xDown to false so array doesn't keep on moving down
  alienDown = false;
  //for an integer, i = 0, i is less than the length of the array, where i is incremented by 1 each time the for loop runs
  for (int i = 0; i < alienFleet.length; i++)
  {
    //for an integer, j = 0, j is less than the rows of the array, where j is incremented by 1 each time the for loop runs
    for (int j = 0; j < alienFleet[0].length; j++)
    {
      //if the alien at the i and j value index is not null
      if (alienFleet[i][j] != null)
      {
        //call the moveDown method as defined within the Alien class to move the array of aliens down
        alienFleet[i][j].moveDown();
      }
    }
  }
}

//method called when the mouse is pressed
void mousePressed()
{
  //call the mousePressed method as defined within the GUIScreen class
  StartScreen.mousePressed();
}

//method called when a key is pressed
void keyPressed()
{
  //call the keyPressed method as defined within the Defender class
  android.keyPressed();
  //if the SPACE bar is pressed and the gameMode is set as INGAME
  if (key == ' ' && currentMode == gameMode.INGAME)
  {
    //make the boolean variable spacePressed equal to true (so bullets keep on displaying after they have been shot even if space bar is released)
    spacePressed = true;
    //if the size of the arrayList of bullets is less than or equal to 4
    if (defenderBulletsList.size() <= 3)
    {
      //add a Bullet object at the x value of the Defender + 93 and the y value of the Defender
      defenderBulletsList.add(new DefenderBullet(android.getDefenderX() + 93, android.getDefenderY()));
    }
  }
  /////////////////////////////////////////////////
  if(currentMode == gameMode.FINISH)
  {
    if(keyCode == BACKSPACE)
    {
      if(myText.length() > 0)
      {
        myText = myText.substring(0, myText.length() - 1);
      }
    }
    else if (keyCode != SHIFT && keyCode != CONTROL && keyCode != ALT && keyCode != TAB && keyCode != ENTER)
    {
      myText = myText + key;
    }
  }
}

//method called when a key is released
void keyReleased()
{
  //call the keyReleased method as defined within the Defender class
  android.keyReleased();
}

//method to remove Bullets from the ArrayList of Bullets
void removeDefenderBullets()
{
  /* 
   for an integer, i is equal to the size of the bulletsList - 1, where i is greater than or equal to 0
   and i is decremented by 1 each time the for loop runs
   Decrement through ArrayList so you don't get a NullPointerException if you remove a Bullet before the 
   for loop reaches the end of the ArrayList
   */
  for (int i = defenderBulletsList.size() - 1; i >= 0; i--)
  {
    /* 
     create a variable called index which takes in a DefenderBullet object and equal it to 
     the index of the DefenderBullet object, it is taking in, within the defenderBulletsList ArrayList
     */
    DefenderBullet index = defenderBulletsList.get(i);
    /*
      if the Bullet has triggered the getRemove method in the DefenderBullet class thus equalling the boolean variable 
      toRemove to true
      OR the the y value of the bullet is less than 0
     */
    if (index.getToRemove() || index.getBulletY() < 0)
    {
      //remove the bullet which has the index i from the bulletsList ArrayList
      defenderBulletsList.remove(i);
    }
  }
}

////////////////////////////

//method to add bullets to the ArrayList of AlienBullets
void addAlienBullets()
{
  //assign a random number between 0 and 1000 to a float variable, r
  float r = random(1000);
  //if r is less than 50 AND r is greater than 20
  if(r < 50 && r > 20 && frameCount %5 == 0)
  {
    //for an integer, i = 0, i is less than the length of the array, where i is incremented by 1 each time the for loop runs
    for(int i = 0; i < alienFleet.length; i++)
    {
      //for an integer, j = 0, j is less than the rows of the array, where j is incremented by 1 each time the for loop runs
      for(int j = 0; j < alienFleet[0].length; j++)
      {
        //if the alien at the i and j value index is not null AND the size of the AlienBullets ArrayList is less than the number of Aliens
        if(alienFleet[i][j] != null && alienBulletsList.size() < (alienFleet.length * alienFleet[0].length))
        { 
            //add an AlienBullet at the x and y value of the Alien
            alienBulletsList.add(new AlienBullet(alienFleet[i][j].getAlienX()+ 10, alienFleet[i][j].getAlienY() + 10));
        }
      }
    }
  }
}

//method to shoot AlienBullets
void shootAlienBullets()
{
  for(int i = 0; i < alienFleet.length; i++)
  {
    for(int j = 0; j < alienFleet[0].length; j++)
    {
      for(AlienBullet count : alienBulletsList)
      {
        count.render();
        if(android.isHit(count.getBulletX(),count.getBulletY()))
        {
          //use the setter method for setting the lives variable so the number of lives decreases by 1
          android.setLives(android.getLives()-1);
        }
      }
    }
  }
}

void removeAlienBullets()
{
  for (int i = alienBulletsList.size() - 1; i >= 0; i--)
  {
    /* 
     create a variable called index which takes in a AlienBullet object and equal it to 
     the index of the Bullet object, it is taking in, within the bulletsList ArrayList
     */
    AlienBullet index = alienBulletsList.get(i);
    /*
      if the Bullet has triggered the getRemove method in the Bullet class thus equalling the boolean variable 
      toRemove to true
      OR the the y value of the bullet is less than 0
     */
    if (index.getToRemove() || index.getBulletY() > height)
    {
      //remove the bullet which has the index i from the bulletsList ArrayList
      alienBulletsList.remove(i);
    }
  }
}


//////////highscores////////////////////////////